import cv2
import logging
logging.basicConfig(filename=("D://data for god//god.txt"), level=logging.DEBUG, format='%(asctime)s: %(message)s')
eyeCascade = cv2.CascadeClassifier('D://data for god//haarcascade_eye.xml')
smileCascade = cv2.CascadeClassifier('D://data for god//haarcascade_smile.xml')
faceCascade = cv2.CascadeClassifier('D://data for god//haarcascade_frontalface_default.xml')
cap = cv2.VideoCapture(0)
cap.set(3,640) 
cap.set(4,480) 
while True:
    ret, img = cap.read()
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = faceCascade.detectMultiScale(
        gray,     
        scaleFactor=1.2,
        minNeighbors=5,     
        minSize=(20, 20)
    )
    for (x,y,w,h) in faces:
        cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
        roi_gray = gray[y:y+h, x:x+w]
        roi_color = img[y:y+h, x:x+w] 
        logging.info("face found at ({}, {})".format(x, y))
    eyes = eyeCascade.detectMultiScale(
            roi_gray,
            scaleFactor= 1.5,
            minNeighbors=5,
            minSize=(5, 5),
            )
    for (ex, ey, ew, eh) in eyes:
            cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
            logging.info("eyes found at ({}, {})".format(ex, ey))
    smile = smileCascade.detectMultiScale(
            roi_gray,
            scaleFactor= 1.5,
            minNeighbors=15,
            minSize=(25, 25),
            )
        
    for (xx, yy, ww, hh) in smile:
            cv2.rectangle(roi_color, (xx, yy), (xx + ww, yy + hh), (0, 255, 0), 2)
            logging.info("smile found at ({}, {})".format(xx, yy))
    cv2.imshow('video',img)
    k = cv2.waitKey(30) & 0xff
    if k == 27: 
        break
cap.release()
cv2.destroyAllWindows()